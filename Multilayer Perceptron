{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyOwvBWU33dSDeqbGmjWEGUa"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"AoyaIgov09lr","executionInfo":{"status":"ok","timestamp":1690595680062,"user_tz":-540,"elapsed":8765,"user":{"displayName":"JeongMin Kang","userId":"11670142024132143585"}},"outputId":"f9369d42-0d0a-408f-c704-08efa15e31c8"},"outputs":[{"output_type":"stream","name":"stdout","text":["0 th loss: 2.8261190231396256\n","1000 th loss: 2.7661393725354815\n","2000 th loss: 2.7484083019974794\n","3000 th loss: 2.701394453056367\n","4000 th loss: 2.5959540323680144\n","5000 th loss: 2.4167915277446905\n","6000 th loss: 2.2048715628920053\n","7000 th loss: 1.9995612371999558\n","8000 th loss: 1.7293426260336529\n","9000 th loss: 1.2504708763665358\n","10000 th loss: 0.7947527492009507\n","11000 th loss: 0.521334169582023\n","12000 th loss: 0.3710541293090728\n","13000 th loss: 0.2826334668525487\n","14000 th loss: 0.2261232488219992\n","15000 th loss: 0.18746084073423466\n","16000 th loss: 0.15957205065112684\n","17000 th loss: 0.13860924736403024\n","18000 th loss: 0.12233107986338411\n","19000 th loss: 0.10935488079848626\n","20000 th loss: 0.09878616938371025\n","21000 th loss: 0.09002287527251468\n","22000 th loss: 0.08264598322528713\n","23000 th loss: 0.0763554678480622\n","24000 th loss: 0.07093118923146002\n","25000 th loss: 0.0662081611812122\n","26000 th loss: 0.062060417535453556\n","27000 th loss: 0.05839019738476139\n","28000 th loss: 0.05512051939144174\n","29000 th loss: 0.052189973010743046\n","30000 th loss: 0.04954899423516901\n","31000 th loss: 0.04715715656861088\n","32000 th loss: 0.04498116959647072\n","33000 th loss: 0.04299337929590098\n","34000 th loss: 0.04117062973519164\n","35000 th loss: 0.03949338882511249\n","36000 th loss: 0.03794506955288197\n","37000 th loss: 0.036511497696128534\n","38000 th loss: 0.03518049053049388\n","39000 th loss: 0.033941520515868406\n","40000 th loss: 0.032785444671742055\n","41000 th loss: 0.03170428518697831\n","42000 th loss: 0.030691050325075013\n","43000 th loss: 0.02973958727004843\n","44000 th loss: 0.028844460476433763\n","45000 th loss: 0.028000850524528144\n","46000 th loss: 0.027204469568841563\n","47000 th loss: 0.026451490296284564\n","48000 th loss: 0.025738485947170386\n","49000 th loss: 0.02506237944482471\n","50000 th loss: 0.024420400063626134\n","51000 th loss: 0.023810046366591384\n","52000 th loss: 0.023229054381523014\n","53000 th loss: 0.0226753701736832\n","54000 th loss: 0.02214712612387255\n","55000 th loss: 0.02164262034201367\n","56000 th loss: 0.021160298744169068\n","57000 th loss: 0.02069873940030601\n","58000 th loss: 0.020256638824796197\n","59000 th loss: 0.019832799934613652\n","60000 th loss: 0.01942612144372741\n","61000 th loss: 0.01903558849814187\n","62000 th loss: 0.018660264385834152\n","63000 th loss: 0.018299283180629813\n","64000 th loss: 0.017951843199767042\n","65000 th loss: 0.017617201172232557\n","66000 th loss: 0.017294667029564954\n","67000 th loss: 0.016983599243092957\n","68000 th loss: 0.01668340064201724\n","69000 th loss: 0.01639351465556057\n","70000 th loss: 0.016113421929941394\n","71000 th loss: 0.015842637277342485\n","72000 th loss: 0.015580706919543264\n","73000 th loss: 0.015327205993595187\n","74000 th loss: 0.015081736290981416\n","75000 th loss: 0.014843924205196821\n","76000 th loss: 0.014613418865709191\n","77000 th loss: 0.01438989043887853\n","78000 th loss: 0.014173028578698742\n","79000 th loss: 0.01396254101219159\n","80000 th loss: 0.01375815224601408\n","81000 th loss: 0.013559602382359273\n","82000 th loss: 0.013366646033536335\n","83000 th loss: 0.013179051325782346\n","84000 th loss: 0.012996598983879303\n","85000 th loss: 0.012819081489041772\n","86000 th loss: 0.012646302303331396\n","87000 th loss: 0.012478075154560921\n","88000 th loss: 0.012314223376254867\n","89000 th loss: 0.012154579297798201\n","90000 th loss: 0.011998983680380352\n","91000 th loss: 0.01184728519477902\n","92000 th loss: 0.011699339937407467\n","93000 th loss: 0.011555010981407975\n","94000 th loss: 0.011414167959860664\n","95000 th loss: 0.011276686678469634\n","96000 th loss: 0.011142448755319515\n","97000 th loss: 0.011011341285530704\n","98000 th loss: 0.01088325652882359\n","99000 th loss: 0.01075809161819712\n","After training:\n","\n","W1:\n"," [[5.65443604 5.65156882]\n"," [7.49953724 7.48402719]]\n","b1:\n"," [[-8.64595499]\n"," [-3.43532706]]\n","W2:\n"," [[-13.81590639  13.0105674 ]]\n","b2:\n"," [[-6.09446339]]\n","losses:\n"," [[2.82611902]\n"," [2.82434768]\n"," [2.82263898]\n"," ...\n"," [0.01063611]\n"," [0.01063599]\n"," [0.01063587]]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Predicted labels: [[0. 1. 1. 0.]]\n"]}],"source":["import numpy as np\n","from matplotlib import pyplot as plt\n","\n","def sigmoid(z):\n","    \"\"\"sigmoid activation function on input z\"\"\"\n","    return 1 / (1 + np.exp(-z)) # defines the sigmoid activation function\n","\n","def forward_propagation(X, Y, W1, b1, W2, b2):\n","    \"\"\"\n","     Computes the forward propagation operation of a neural network and\n","     returns the output after applying the sigmoid activation function\n","    \"\"\"\n","    net_h = np.dot(W1, X) + b1 # net output at the hidden layer\n","    out_h = sigmoid(net_h) # actual after applying sigmoid\n","    net_y = np.dot(W2, out_h) + b2 # net output at the output layer\n","    out_y = sigmoid(net_y) # actual output at the output layer\n","\n","    return out_h, out_y\n","\n","def calculate_error(y, y_predicted):\n","   \"\"\"Computes cross entropy error\"\"\"\n","   loss = np.sum(- y * np.log(y_predicted) - (1 - y) * np.log(1 - y_predicted))\n","   return loss\n","\n","\n","def backward_propagation(X, Y, out_h, out_y, W2):\n","    \"\"\"\n","     Computes the backpropagation operation of a neural network and\n","     returns the derivative of weights and biases\n","    \"\"\"\n","    l2_error = out_y - Y # actual - target\n","    dW2 = np.dot(l2_error, out_h.T)  # derivative of layer 2 weights is the dot product of error at layer 2 and hidden layer output\n","    db2 = np.sum(l2_error, axis = 1, keepdims=True) # derivative of layer 2 bias  is simply the error at layer 2\n","\n","    dh = np.dot(W2.T, l2_error) # compute dot product of weights in layer 2 with error at layer 2\n","    l1_error = np.multiply(dh, out_h * (1 - out_h)) # compute layer 1 error\n","    dW1 = np.dot(l1_error, X.T) # derivative of layer 2 weights is the dot product of error at layer 1 and input\n","    db1 = np.sum(l1_error, axis=1, keepdims=True) # derivative of layer 1 bias  is simply the error at layer 1\n","\n","    return dW1, db1, dW2, db2 # return the derivatives of parameters\n","\n","def update_parameters(W1, b1, W2, b2, dW1, db1, dW2, db2, learning_rate):\n","    \"\"\"Updates weights and biases and returns thir values\"\"\"\n","    W1 = W1 - learning_rate * dW1\n","    W2 = W2 - learning_rate * dW2\n","    b1 = b1 - learning_rate * db1\n","    b2 = b2 - learning_rate * db2\n","    return W1, b1, W2, b2\n","\n","def train(X, Y, W1, b1, W2, b2, num_iterations, losses, learning_rate):\n","    \"\"\"Trains the neural network and returns updated weights, bias and loss\"\"\"\n","    for i in range(num_iterations):\n","        A1, A2 = forward_propagation(X, Y, W1, b1, W2, b2)\n","        losses[i, 0] = calculate_error(Y, A2)\n","        if i%1000 == 0:\n","            print(i,'th loss:',losses[i,0])\n","        dW1, db1, dW2, db2 = backward_propagation(X, Y, A1, A2, W2)\n","        W1, b1, W2, b2 = update_parameters(W1, b1, W2, b2, dW1, db1, dW2, db2, learning_rate)\n","    return W1, b1, W2, b2, losses\n","\n","\n","np.random.seed(42) # seed function to generate the same random value\n","\n","# Initializing parameters\n","X = np.array([[0, 0, 1, 1], [0, 1, 0, 1]])\n","Y = np.array([[0, 1, 1, 0]]) # XOR\n","n_h = 2\n","n_x = X.shape[0]\n","n_y = Y.shape[0]\n","W1 = np.random.randn(n_h, n_x)\n","b1 = np.zeros((n_h, 1))\n","W2 = np.random.randn(n_y, n_h)\n","b2 = np.zeros((n_y, 1))\n","\n","num_iterations = 100000\n","learning_rate = 0.01\n","losses = np.zeros((num_iterations, 1))\n","\n","W1, b1, W2, b2, losses = train(X, Y, W1, b1, W2, b2, num_iterations, losses, learning_rate)\n","print(\"After training:\\n\")\n","print(\"W1:\\n\", W1)\n","print(\"b1:\\n\", b1)\n","print(\"W2:\\n\", W2)\n","print(\"b2:\\n\", b2)\n","print(\"losses:\\n\", losses)\n","\n","# Evaluating the performance\n","plt.figure()\n","plt.plot(losses)\n","plt.xlabel(\"EPOCHS\")\n","plt.ylabel(\"Loss value\")\n","plt.show()\n","#plt.savefig('output/legend.png')\n","\n","# Predicting value\n","A1, A2 = forward_propagation(X, Y, W1, b1, W2, b2)\n","pred = (A2 > 0.5) * 1.0\n","print(\"Predicted labels:\", pred)"]},{"cell_type":"code","source":[],"metadata":{"id":"n83wEoNW1Grw"},"execution_count":null,"outputs":[]}]}